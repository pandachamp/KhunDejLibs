/* 02_DS1820_Timer3.c

Onewire : GPE8

*/

#include <stdio.h> 
#include "NUC1xx.h"
#include "LCD_Driver.h"
#include "DrvSYS.h"
#include "Driver\DrvGPIO.h"
#define DELAY300ms 300000 // The maximal delay time is 335000 us.

static uint16_t Timer3Counter=0;
static uint16_t Timer1Counter=0;

/*
written by dejwoot.kha@mail.kmutt.ac.th
2014/3/31
*/

int8_t OneWireReadByteTemperature(void) {
int8_t i; 
int8_t dataByte = 0xCC; // skip ROM

GPIOA->DOUT &= 0xFFDF; // Master send Reset
DrvSYS_Delay(500);
GPIOA->DOUT |= 0x0020;
DrvSYS_Delay(200); // wait for presence pulse

for (i=0;i<8;i++) { // skip ROM
if ((dataByte&0x01 == 0x01)) {
GPIOA->DOUT &= 0xFFDF; // send '1'
DrvSYS_Delay(3); // low > 1 microsec.
GPIOA->DOUT |= 0x0020;
DrvSYS_Delay(60); 
} else {
GPIOA->DOUT &= 0xFFDF; // send '0'
DrvSYS_Delay(60); // low > 60 microsec.
GPIOA->DOUT |= 0x0020;
DrvSYS_Delay(2); 
}
dataByte >>= 1;
}

dataByte = 0xBE; // ReadScratchpad
for (i=0;i<8;i++) {
if ((dataByte&0x01 == 0x01)) {
GPIOA->DOUT &= 0xFFDF; // send '1'
DrvSYS_Delay(3); // low > 1 microsec.
GPIOA->DOUT |= 0x0020;
DrvSYS_Delay(60); 
} else {
GPIOA->DOUT &= 0xFFDF; // send '0'
DrvSYS_Delay(60); // low > 60 microsec.
GPIOA->DOUT |= 0x0020;
DrvSYS_Delay(2); 
}
dataByte >>= 1;
}

// read 8 bits (byte0 scratchpad)
DrvSYS_Delay(100);
for (i=0;i<8;i++) {
GPIOA->DOUT &= 0xFFDF; // 
DrvSYS_Delay(2); // low > 1 microsec.
GPIOA->DOUT |= 0x0020;
// Read
DrvSYS_Delay(12);
if ((GPIOA->PIN &= 0x0020) == 0x0020) {
dataByte >>= 1;
dataByte |= 0x80;
} else {
dataByte >>= 1;
dataByte &= 0x7F; 
}
DrvSYS_Delay(60); 
}
dataByte >>= 1;
return dataByte;
}

void OneWireTxSkipROMConvert(void) {
int8_t i; 
uint8_t dataByte = 0xCC; // skip ROM

GPIOA->DOUT &= 0xFFDF; // Master send Reset
DrvSYS_Delay(500);
GPIOA->DOUT |= 0x0020;
DrvSYS_Delay(200); 

for (i=0;i<8;i++) { // skip ROM
if ((dataByte&0x01 == 0x01)) {
GPIOA->DOUT &= 0xFFDF; // send '1'
DrvSYS_Delay(3); // low > 1 microsec.
GPIOA->DOUT |= 0x0020;
DrvSYS_Delay(60); 
} else {
GPIOA->DOUT &= 0xFFDF; // send '0'
DrvSYS_Delay(60); // low > 60 microsec.
GPIOA->DOUT |= 0x0020;
DrvSYS_Delay(2); 
}
dataByte >>= 1;
}

dataByte = 0x44; // convert Temperature
for (i=0;i<8;i++) {
if ((dataByte&0x01 == 0x01)) {
GPIOA->DOUT &= 0xFFDF; // send '1'
DrvSYS_Delay(3); // low > 1 microsec.
GPIOA->DOUT |= 0x0020;
DrvSYS_Delay(60); 
} else {
GPIOA->DOUT &= 0xFFDF; // send '0'
DrvSYS_Delay(60); // low > 60 microsec.
GPIOA->DOUT |= 0x0020;
DrvSYS_Delay(2); 
}
dataByte >>= 1;
} 
}

void InitTIMER3(void)
{
/* Step 1. Enable and Select Timer clock source */ 
SYSCLK->CLKSEL1.TMR3_S = 0; // Select 12Mhz for Timer0 clock source
// 0 = 12 MHz, 1 = 32 kHz, 2 = HCLK, 7 = 22.1184 MHz
SYSCLK->APBCLK.TMR3_EN = 1; // Enable Timer0 clock source

/* Step 2. Select Operation mode */ 
TIMER3->TCSR.MODE = 1; // 1 -> Select periodic mode
// 0 = One shot, 1 = Periodic, 2 = Toggle, 3 = continuous counting mode

/* Step 3. Select Time out period 
= (Period of timer clock input) * (8-bit Prescale + 1) * (24-bit TCMP)*/
TIMER3->TCSR.PRESCALE = 11; // Set Prescale [0~255]
TIMER3->TCMPR = 1000000; // Set TCMPR [0~16777215]
// (1/12000000)*(11+1)*(1000000)= 1 sec

/* Step 4. Enable interrupt */
TIMER3->TCSR.IE = 1;
TIMER3->TISR.TIF = 1; // Write 1 to clear the interrupt flag 
NVIC_EnableIRQ(TMR3_IRQn); // Enable Timer0 Interrupt

/* Step 5. Enable Timer module */
TIMER3->TCSR.CRST = 1; // Reset up counter
TIMER3->TCSR.CEN = 1; // Enable Timer0
}

void TMR3_IRQHandler(void) // Timer0 interrupt subroutine 
{
int8_t ds1820Temp;
//uint16_t Timer3Counter = 0;
char lcd2_buffer[18] = "Timer3:";
char lcd3_buffer[18] = "T = C";

sprintf(lcd2_buffer+7," %d",Timer3Counter);
print_lcd(2, lcd2_buffer);
Timer3Counter++;

OneWireTxSkipROMConvert(); // to initiate a temperature measurement and A-to-D conversion
DrvSYS_Delay(100);
ds1820Temp = OneWireReadByteTemperature();
sprintf(lcd3_buffer+4,"%d C",ds1820Temp);
print_lcd(3, lcd3_buffer); 

TIMER3->TISR.TIF = 1; // Write 1 to clear the interrupt flag 
}

void InitGPIO()
{
// DrvGPIO_Open(E_GPA,12,E_IO_OUTPUT); // IN1
DrvGPIO_Open(E_GPA,13,E_IO_OUTPUT); // EN
DrvGPIO_Open(E_GPA,14,E_IO_OUTPUT); // IN2
// DrvGPIO_ClrBit(E_GPA,12);
DrvGPIO_ClrBit(E_GPA,13);
DrvGPIO_ClrBit(E_GPA,14);
}

void InitADC7(void)
{
/* Step 1. GPIO initial */ 
GPIOA->OFFD |= 0x00800000; //Disable digital input path
SYS->GPAMFP.ADC7_SS21_AD6 = 1; //Set ADC function 

/* Step 2. Enable and Select ADC clock source, and then enable ADC module */ 
SYSCLK->CLKSEL1.ADC_S = 2; //Select 22Mhz for ADC
SYSCLK->CLKDIV.ADC_N = 1; //ADC clock source = 22Mhz/2 =11Mhz;
SYSCLK->APBCLK.ADC_EN = 1; //Enable clock source
ADC->ADCR.ADEN = 1; //Enable ADC module

/* Step 3. Select Operation mode */
ADC->ADCR.DIFFEN = 0; //single end input
ADC->ADCR.ADMD = 0; //single mode

/* Step 4. Select ADC channel */
ADC->ADCHER.CHEN = 0x80;

/* Step 5. Enable ADC interrupt */
ADC->ADSR.ADF = 1; //clear the A/D interrupt flags for safe 
ADC->ADCR.ADIE = 1;
// NVIC_EnableIRQ(ADC_IRQn);

/* Step 6. Enable WDT module */
ADC->ADCR.ADST = 1;
}

void InitPWM5(void)
{
/* Step 1. GPIO initial */ 
SYS->GPEMFP.PWM5 = 1;

/* Step 2. Enable and Select PWM clock source*/ 
SYSCLK->APBCLK.PWM45_EN = 1;//Enable PWM clock
SYSCLK->CLKSEL2.PWM45_S = 3;//Select 22.1184Mhz for PWM clock source

PWMB->PPR.CP01 = 1; //Prescaler 0~255, Setting 0 to stop output clock
PWMB->CSR.CSR1 = 0; // PWM clock = clock source/(Prescaler + 1)/divider

/* Step 3. Select PWM Operation mode */
PWMB->PCR.CH1MOD = 1; //0:One-shot mode, 1:Auto-load mode
//CNR and CMR will be auto-cleared after setting CH0MOD form 0 to 1.
PWMB->CNR1 = 0xFFFF;
PWMB->CMR1 = 0xFFFF;

PWMB->PCR.CH1INV = 0; //Inverter->0:off, 1:on
PWMB->PCR.CH1EN = 1; //PWM function->0:Disable, 1:Enable
PWMB->POE.PWM1 = 1; //Output to pin->0:Diasble, 1:Enable
}

void InitTIMER1(void)
{
/* Step 1. Enable and Select Timer clock source */ 
SYSCLK->CLKSEL1.TMR1_S = 0; // Select 12Mhz for Timer0 clock source
// 0 = 12 MHz, 1 = 32 kHz, 2 = HCLK, 7 = 22.1184 MHz
SYSCLK->APBCLK.TMR1_EN = 1; // Enable Timer0 clock source

/* Step 2. Select Operation mode */ 
TIMER1->TCSR.MODE = 1; // 1 -> Select periodic mode
// 0 = One shot, 1 = Periodic, 2 = Toggle, 3 = continuous counting mode

/* Step 3. Select Time out period 
= (Period of timer clock input) * (8-bit Prescale + 1) * (24-bit TCMP)*/
TIMER1->TCSR.PRESCALE = 11; // Set Prescale [0~255]
TIMER1->TCMPR = 1000000; // Set TCMPR [0~16777215]
// (1/12000000)*(11+1)*(1000000)= 1 sec

/* Step 4. Enable interrupt */
TIMER1->TCSR.IE = 1;
TIMER1->TISR.TIF = 1; // Write 1 to clear the interrupt flag 
NVIC_EnableIRQ(TMR1_IRQn); // Enable Timer0 Interrupt

/* Step 5. Enable Timer module */
TIMER1->TCSR.CRST = 1; // Reset up counter
TIMER1->TCSR.CEN = 1; // Enable Timer0
}

void TMR1_IRQHandler(void) // Timer0 interrupt subroutine 
{
char adc_value[15] = "ADC7 Value:";
char lcd2_buffer[18]="Timer1:";
char lcd3_buffer[18]="T0_TDR:";

while (ADC->ADSR.ADF == 0); // A/D Conversion End Flag
// A status flag that indicates the end of A/D conversion.

ADC->ADSR.ADF = 1; // This flag can be cleared by writing 1 to self
PWMB->CMR1 = ADC->ADDR[7].RSLT << 4;
Show_Word(0,11,' ');
Show_Word(0,12,' ');
Show_Word(0,13,' ');
//sprintf(adc_value+11,"%d ",ADC->ADDR[7].RSLT);
print_lcd(0, adc_value);
ADC->ADCR.ADST = 1; // 1 = Conversion start 

Timer1Counter+=1;
sprintf(lcd2_buffer+7," %d",Timer1Counter);
//print_lcd(2, lcd2_buffer); 

sprintf(lcd3_buffer+7," %d ",TIMER0->TDR);
print_lcd(1, lcd3_buffer);
TIMER0->TCSR.CRST = 1; // Reset up counter
TIMER0->TCSR.CEN = 1; // Enable Timer

TIMER1->TISR.TIF = 1; // Write 1 to clear the interrupt flag 
}

void InitTIMER0(void) // event counting trial
{
/* Step 1. Enable and Select Timer clock source */ 
SYSCLK->CLKSEL1.TMR0_S = 2; // Select HCLK for event counting
// 0 = 12 MHz, 1 = 32 kHz, 2 = HCLK, 7 = 22.1184 MHz
SYSCLK->APBCLK.TMR0_EN = 1; // Enable Timer clock source

SYS->GPBMFP.TM0 = 1; // Multiple Function Pin GPIOB Control Register
//SYS->ALTMFP.PB9_S11 = 0; // Alternative Multiple Function Pin Control Register

TIMER0->TEXCON.TX_PHASE = 1; // A rising edge of external co in will be counted.
TIMER0->TEXCON.TCDB = 1; // Enable De-bounce

TIMER0->TCSR.CTB = 1; // Enable counter mode

/* Step 2. Select Operation mode */ 
// TIMER1->TCSR.MODE = 1; // 1 -> Select periodic mode
// 0 = One shot, 1 = Periodic, 2 = Toggle, 3 = continuous counting mode

/* Step 3. Select Time out period 
= (Period of timer clock input) * (8-bit Prescale + 1) * (24-bit TCMP)*/
TIMER0->TCSR.PRESCALE = 0; // Set Prescale [0~255]
// TIMER1->TCMPR = 1000000; // Set TCMPR [0~16777215]
// (1/12000000)*(11+1)*(1000000)= 1 sec or 1 Hz 

/* Step 5. Enable Timer module */
TIMER0->TCSR.CRST = 1; // Reset up counter
TIMER0->TCSR.CEN = 1; // Enable Timer

TIMER0->TCSR.TDR_EN = 1; // Enable TDR function 
}

int32_t main (void)
{


UNLOCKREG();
DrvSYS_Open(48000000);
LOCKREG();

Initial_pannel(); //call initial pannel function
clr_all_pannal();
InitGPIO();
DrvGPIO_SetBit(E_GPA,13); // EN
DrvGPIO_ClrBit(E_GPA,14); // IN2
print_lcd(0, "DS1820 Onewire");
InitADC7();
InitPWM5();
DrvGPIO_Open(E_GPA, 5, E_IO_QUASI);
InitTIMER3();
InitTIMER1();
InitTIMER0();


while (1) {
__NOP();
}
}